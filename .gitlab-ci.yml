include:
  - ".gitlab-ci.builder.yml"

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"

stages:
  - build
  - test
  - release

debug-build:
  stage: build
  only:
    - branches
  cache:
    key: &cache-key
      files:
        - Cargo.lock
    paths: &cache-paths
      - target/
      - $CARGO_HOME
  artifacts:
    paths:
      - target/debug/samotop-server
      - Cargo.lock
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - mkdir -p target
    - mkdir -p "$CARGO_HOME"
    - du -shx target
    - du -shx "$CARGO_HOME"
    - cargo build --all-features --color always
    # cleanup target folder
    - ./clean.sh

release-build:
  stage: build
  only:
    - /^release\/*/
    - /^hotfix\/*/
    - master
  cache:
    key: *cache-key
    paths: *cache-paths
    policy: pull
  artifacts:
    paths:
      - target/release/samotop-server
      - Cargo.lock
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - cargo build --all-targets --release --color always
    - cargo test --all-targets --release --color always

stable-test:
  stage: build
  only:
    - branches
  cache:
    key: *cache-key
    paths: *cache-paths
    policy: pull
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - cargo test --all-targets --all-features --color always

clippy-test:
  extends: stable-test
  script:
    - cargo clippy --all-features --color always -- -Dclippy::all

check-test:
  extends: stable-test
  script:
    - cargo check --all-targets --all-features --bins --tests --benches --examples --color always
    - ./fix.sh

audit-test:
  extends: stable-test
  script:
    - cargo audit --deny warnings --color always

nightly-test:
  stage: build
  allow_failure: true
  variables:
    RUST_BACKTRACE: 1
  only:
    - branches
  cache:
    key: 
      prefix: nightly
      files:
        - Cargo.lock
    paths: *cache-paths
  before_script:
    - rustup default nightly
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - cargo test --all-targets --all-features --color always
    - cargo clippy --all-features --color always -- -Dclippy::all
    - cargo check --all-targets --all-features --bins --tests --benches --examples --color always
    # cleanup target folder
    - ./clean.sh

.example-template:
  stage: build
  only:
    - branches
  cache:
    key: *cache-key
    paths: *cache-paths
    policy: pull
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - cargo build --example ${EXAMPLE:?} --color always
    - RUST_LOG=trace cargo run --example ${EXAMPLE:?} &
    - sleep 10
    - |
      sed -e 's/$/\r/' <<EOF | curl -v --url 'smtp://localhost:2525' \
      --mail-from from@spf.org \
      --mail-rcpt to@mikesh.info \
      --upload-file - > client.log 2>&1 \
      || echo "${FAILED:=sending mail failed}"
      From: Moohoo <moo@hoo.com>
      To: Yeeehaw <ye@haw.com>
      Subject: Try me


      .
      ..
      xoxo
      EOF
    - cat client.log | grep -v '* Expire in'
    - find tmp/samotop/spool/new/ -print -exec cat {} \; || true
    - test -z "${FAILED}"

example-lmtp:
  extends: .example-template
  variables:
    EXAMPLE: to-lmtp-tcp
  services:
    - name: dovecot/dovecot:2.3.11
      alias: dovecot

example-default:
  extends: .example-template
  variables:
    EXAMPLE: default

example-dir:
  extends: .example-template
  variables:
    EXAMPLE: to-dirmail

example-cmd:
  extends: .example-template
  variables:
    EXAMPLE: on-cmd
  script:
    - cargo build --example ${EXAMPLE:?}
    - |
      sed -e 's/$/\r/' <<EOF | cargo run --example ${EXAMPLE:?}
      lhlo boogie
      mail from:<from@spf.org>
      rcpt to:<komu@makesh.info>
      rcpt to:<to@mikesh.info>
      rcpt to:<za@mukesh.info>
      data
      From: Moohoo <moo@hoo.com>
      To: Yeeehaw <ye@haw.com>
      Subject: Try me

      xoxo
      .
      quit
      EOF
    - find tmp/samotop/spool/new/ -print -exec cat {} \;

publish-crate:
  variables:
    COMPVER: $CI_COMMIT_TAG
  stage: release
  only:
    - tags
  cache:
    key: *cache-key
    paths: *cache-paths
    policy: pull
  artifacts:
    paths:
      - Cargo.lock
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
  script:
    - COMPONENT="$(dirname "$COMPVER")"
    - VERSION="${COMPVER##$COMPONENT/}"
    - echo "Releasing component ${COMPONENT:?cannot be empty} v ${VERSION:?cannot be empty}"
    - cargo test --manifest-path "$COMPONENT/Cargo.toml" --release --color always
    - test "$VERSION" == "$(cargo pkgid --manifest-path "$COMPONENT/Cargo.toml" | cut -d '#' -f2- | tr -d '\n')"
    - cargo publish --manifest-path "$COMPONENT/Cargo.toml" --token "$CRATES_KEY" --color always

server-version:
  stage: build
  script:
    - SAMOTOP_VERSION=$(cargo run -p samotop-server -- --version | cut -d' ' -f2)
    - echo "SAMOTOP_VERSION=$SAMOTOP_VERSION" > vars.env
    - echo "SAMOTOP_IMAGE=$CI_REGISTRY_IMAGE/samotop:$SAMOTOP_VERSION" >> vars.env
    - cat vars.env
  cache:
    key: *cache-key
    paths: *cache-paths
    policy: pull
  artifacts:
    reports:
      dotenv:
        vars.env

server-docker-image:
  extends: .kaniko-build-template
  stage: release
  variables:
    COMPONENT: samotop
    CONTEXT: .
    DOCKERFILE: Dockerfile
    BUILD_ARGS: ""
  only:
    changes:
      - samotop-server/**/*
      - Dockerfile
      - .gitlab-ci.yml
  environment:
    name: server-docker-image
    url: https://gitlab.com/BrightOpen/BackYard/Samotop/container_registry/1510406
