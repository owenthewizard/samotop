image: "rust:latest"

stages:
  - build
  - release

variables:
  CARGO_HOME: "$CI_PROJECT_DIR/.cargo"

build:
  stage: build
  only:
    - branches
  cache:
    paths: &cache-paths
      - target/
      - $CARGO_HOME
  artifacts:
    paths:
      - target/debug/samotop-server
      - target/release/samotop-server
      - Cargo.lock
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
    - cargo install cargo-sweep
  script:    
    - mkdir -p target
    - du -shx target
    - cargo build --color always
    - cargo test --all --color always
    # cleanup target folder
    - du -shx target
    - find target -name 'samotop*' -exec rm -rf {} \; || true
    - find target -name 'libsamotop*' -exec rm -rf {} \; || true
    - rm -rf target/debug/examples || true
    - rm -rf target/debug/incremental || true
    - cargo sweep -t 3
    - cargo sweep -i
    - du -shx target

build-release:
  stage: build
  only:
    - /^release\/*/
    - /^hotfix\/*/
    - master
  artifacts:
    paths:
      - target/release/samotop-server
      - Cargo.lock
  before_script:
    - rustc --version --verbose
    - cargo --version --verbose
  script:    
    - cargo build --release --color always
    - cargo test --release --all --color always

test-stable:
  stage: build
  only:
    - branches
  cache:
    paths: *cache-paths
    policy: pull
  before_script:
    - rustup component add clippy rustfmt
    - cargo install cargo-readme
  script:
    - cargo test --workspace --all-features --color always
    - cargo clippy --workspace --all-features --color always -- -Dclippy::all
    - cargo check --workspace --benches --color always
    - ./fix.sh

test-nightly:
  stage: build
  allow_failure: true
  variables:
    RUST_BACKTRACE: 1
  only:
    - branches
  cache:
    key: nightly
    paths: *cache-paths
  before_script:
    - rustup default nightly
    - rustc --version --verbose
    - cargo --version --verbose
    - rustup component add clippy rustfmt
    - cargo install cargo-readme
    - cargo install cargo-sweep
  script:
    - cargo test --workspace --all-features --color always
    - cargo clippy --workspace --all-features --color always -- -Dclippy::all
    - cargo check --workspace --benches --color always
    - ./fix.sh
    # cleanup target folder
    - du -shx target
    - find target -name 'samotop*' -exec rm -rf {} \; || true
    - find target -name 'libsamotop*' -exec rm -rf {} \; || true
    - rm -rf target/debug/examples || true
    - rm -rf target/debug/incremental || true
    - cargo sweep -t 3
    - cargo sweep -i
    - du -shx target
.example-template:
  stage: build
  only:
    - branches
  cache:
    paths: *cache-paths
    policy: pull
  services:
    - name: dovecot/dovecot:2.3.11
      alias: dovecot
  script:
    - cargo build --example ${EXAMPLE:?}
    - RUST_LOG=trace cargo run --example ${EXAMPLE:?} &
    - sleep 10
    - |
      sed -e 's/$/\r/' <<EOF | curl -v --url 'smtp://localhost:2525' \
      --mail-from from@spf.org \
      --mail-rcpt to@mikesh.info \
      --upload-file - > client.log 2>&1 \
      || echo "${FAILED:=sending mail failed}"
      From: Moohoo <moo@hoo.com>
      To: Yeeehaw <ye@haw.com>
      Subject: Try me


      .
      ..
      xoxo
      EOF
    - cat client.log | grep -v '* Expire in'
    - find tmp/samotop/spool/new/ -print -exec cat {} \; || true
    - test -z "${FAILED}"

example-lmtp:
  extends: .example-template
  variables:
    EXAMPLE: to-lmtp-tcp

example-default:
  extends: .example-template
  variables:
    EXAMPLE: default

example-dir:
  extends: .example-template
  variables:
    EXAMPLE: to-dirmail

example-cmd:
  extends: .example-template
  variables:
    EXAMPLE: on-cmd
  script:
    - cargo build --example ${EXAMPLE:?}
    - |
      sed -e 's/$/\r/' <<EOF | cargo run --example ${EXAMPLE:?}
      lhlo boogie
      mail from:<from@spf.org>
      rcpt to:<to@mikesh.info>
      data
      From: Moohoo <moo@hoo.com>
      To: Yeeehaw <ye@haw.com>
      Subject: Try me

      xoxo
      .
      quit
      EOF
    - find tmp/samotop/spool/new/ -print -exec cat {} \;

publish-crate:
  variables:
    COMPVER: $CI_COMMIT_TAG
  stage: release
  only:
    - tags
  cache:
    paths: *cache-paths
    policy: pull
  artifacts:
    paths:
      - Cargo.lock
  script:
    - COMPONENT="$(dirname "$COMPVER")"
    - VERSION="${COMPVER##$COMPONENT/}"
    - echo "Releasing component ${COMPONENT:?cannot be empty} v ${VERSION:?cannot be empty}"
    - cargo test --manifest-path "$COMPONENT/Cargo.toml" --release --color always
    - test "$VERSION" == "$(cargo pkgid --manifest-path "$COMPONENT/Cargo.toml" | cut -d '#' -f2- | tr -d '\n')"
    - cargo publish --manifest-path "$COMPONENT/Cargo.toml" --token "$CRATES_KEY" --color always

publish-docker:
  stage: release
  image: "docker:git"
  services:
    - docker:dind
  only:
    changes:
      - samotop-server/**/*
    refs:
      - develop
      - master
  script:
    - cp -ra samotop-server/docker target/
    # Copy either debug or release binary
    - cp target/release/samotop-server target/docker/samotop
    - cd target/docker/
    - docker build -t samotop .
    - cd ../../
    - docker run -t --rm samotop --help
    # extract version
    - VER="$(docker run -t --rm samotop --version | cut -d ' ' -f2- | tr -d '\r\n')"
    - echo "version=$VER"
    # local tagging
    - TAG_CURRENT="brightopen/samotop:$VER"
    - TAG_MINOR="brightopen/samotop:${VER%.*}"
    - TAG_MAJOR="brightopen/samotop:${VER%%.*}"
    - TAG_LATEST="brightopen/samotop:latest"
    - |
      echo "Tags
        current: $TAG_CURRENT (willbe published only on develop or master)
        minor: $TAG_MINOR (willbe published only on master)
        major: $TAG_MAJOR (willbe published only on master)
        latest: $TAG_LATEST (willbe published only on master)
      "
    - docker tag samotop "$TAG_CURRENT"
    - docker tag samotop "$TAG_MINOR"
    - docker tag samotop "$TAG_MAJOR"
    - docker tag samotop "$TAG_LATEST"
    # remote docker hub push
    - docker login -u "$DOCKER_USR" -p "$DOCKER_PWD"
    # push current version
    - case "$CI_COMMIT_REF_NAME" in master|develop) docker push "$TAG_CURRENT" ;; *) echo Will only push current from master or develop branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac
    # push stable version as latest
    - case "$CI_COMMIT_REF_NAME" in master) docker push "$TAG_MINOR" && docker push "$TAG_MAJOR" && docker push "$TAG_LATEST" ;; *) echo Will only push latest from master branch, not from \'"$CI_COMMIT_REF_NAME"\' ;; esac

builder-test:
  image: registry.gitlab.com/brightopen/backyard/samotop/builder:latest
  stage: build
  script:
    - echo "$CARGO_HOME"
    - echo "$RUSTUP_HOME"
    - rustc --version --verbose
    - cargo --version --verbose
    - rustfmt --version
    - cargo clippy --version
    - cargo readme --version
    - cargo audit --version
    - cargo outdated --version
    - cargo sweep --version
    - cargo tree --version
    - toml --version
    - jq --version
    - wildq --version

builder-build:
  extends: .kaniko-build-template
  variables:
    COMPONENT: builder
    VERSION: latest
    CONTEXT: .
    DOCKERFILE: Dockerfile
    BUILD_ARGS: --target builder
  only:
    changes:
      - Dockerfile
      - .gitlab-ci.yml
  environment:
    name: builder
    url: https://gitlab.com/BrightOpen/BackYard/Samotop/container_registry/1517868

# Jobs based on this template produce a docker image without the need for docker-in-docker (dind).
# The job exports the given components pinned image so that deployments use the image built specifically in this pipeline.
# If the image is not built in the pipeline, the default SEMVER image reference is used so it will deploy
# the image of the same version built by another pipeline.
.kaniko-build-template:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: .pre
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo building "${COMPONENT:?required env variable}"
    - echo version "${VERSION:?required env variable}"
    - echo context "${CONTEXT:?required env variable}"
    - echo dockerfile "${DOCKERFILE:?required env variable}"
    - echo build args "$BUILD_ARGS"
    - IMAGE="$CI_REGISTRY_IMAGE/$COMPONENT:$VERSION"
    - echo image "$IMAGE"
    # TODO: figure out how to prevent overwriting stable image tags (those without any label)
    # Other registries have this feature, not Gitlab - https://gitlab.com/gitlab-org/gitlab/-/issues/18984
    - /kaniko/executor --context "$CONTEXT" --dockerfile "$DOCKERFILE" --destination "$IMAGE" --cache=true --cache-ttl=48h --digest-file kaniko.digest $BUILD_ARGS
    - DIGEST="$(cat kaniko.digest)"
    - COMPONENT_CAP="$(echo "$COMPONENT" | tr [:lower:] [:upper:])"
    - echo "${COMPONENT_CAP}_VERSION=$VERSION" >> ci.env
    - echo "${COMPONENT_CAP}_DIGEST=$DIGEST" >> ci.env
    - echo "${COMPONENT_CAP}_IMAGE_SEMVER=$IMAGE" >> ci.env
    - echo "${COMPONENT_CAP}_IMAGE=$CI_REGISTRY_IMAGE/$COMPONENT@$DIGEST" >> ci.env
    - cat ci.env
  artifacts:
    expire_in: 7 days
    reports:
      dotenv: ci.env
