variables:
  BUILDER_VERSION: "2.0.1"
  BUILDER_COMPONENT: "builder"
  BUILDER_IMAGE: "$CI_REGISTRY_IMAGE/$BUILDER_COMPONENT:$BUILDER_VERSION"

image: $BUILDER_IMAGE

builder-test:
  stage: build
  script:
    - echo "$CARGO_HOME"
    - echo "$RUSTUP_HOME"
    - rustc --version --verbose
    - cargo --version --verbose
    - rustup --version --verbose
    - rustfmt --version
    - cargo clippy --version
    - cargo readme --version
    - cargo audit --version
    #- cargo outdated --version
    - cargo sweep --version
    - cargo tree --version
    - toml --version
    - jq --version

builder-build:
  extends: .kaniko-build-template
  variables:
    COMPONENT: $BUILDER_COMPONENT
    CONTEXT: .
    DOCKERFILE: Dockerfile
    BUILD_ARGS: --target builder
  only:
    changes:
      - Dockerfile
      - .gitlab-ci.builder.yml
  environment:
    name: builder
    url: https://gitlab.com/BrightOpen/Samotop/container_registry/1517868

# Jobs based on this template produce a docker image without the need for docker-in-docker (dind).
# The job exports the given components pinned image so that deployments use the image built specifically in this pipeline.
# If the image is not built in the pipeline, the default SEMVER image reference is used so it will deploy
# the image of the same version built by another pipeline.
# 
# Specify either COMPONENT and VERSION variables (optionally REPOSITORY) and IMAGE will be constructed from these
#  or else specify IMAGE with a tag and COMPONENT and VERSION will be extracted from it.
.kaniko-build-template:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: .pre
  variables:
    KANIKO_DOCKER_CONFIG: "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}"
  script:
    - mkdir -p /kaniko/.docker
    - echo "${KANIKO_DOCKER_CONFIG:?}" > /kaniko/.docker/config.json
    # image_var allows the job to specify the image value through a variable indirectly as a workaround to gitlab variable resolving limits.
    # simply specify COMPONENT=xyz and XYZ_IMAGE=a/b/c/xyz:tag and IMAGE will be taken from XYZ_IMAGE variable
    - component_cap="$(echo "$COMPONENT" | tr [:lower:] [:upper:] | tr - _)"
    - image_var="${component_cap:?}_IMAGE"
    - echo "IMAGE=${IMAGE:=$(eval echo "\$$image_var")}"
    - echo "imgtag=${imgtag:=${IMAGE##*/}}"
    - echo "REPOSITORY=${REPOSITORY:=${IMAGE%/*}}"
    - echo "REPOSITORY=${REPOSITORY:=${CI_REGISTRY_IMAGE:?}}"
    - echo "COMPONENT=${COMPONENT:=${imgtag%%:*}}"
    - echo "VERSION=${VERSION:=${imgtag##*:}}"
    - IMAGE="$REPOSITORY/$COMPONENT:$VERSION"
    - |
      echo "Building ${IMAGE:?}
        COMPONENT ${COMPONENT:?required env variable} 
        VERSION ${VERSION:?required env variable} 
        with context ${CONTEXT:?required env variable} 
        and dockerfile ${DOCKERFILE:?required env variable}
        build args: ${BUILD_ARGS:-none}"
    # TODO: figure out how to prevent overwriting stable image tags (those without any label)
    # Other registries have this feature, not Gitlab - https://gitlab.com/gitlab-org/gitlab/-/issues/18984
    - /kaniko/executor --context "$CONTEXT" --dockerfile "$DOCKERFILE" 
        --destination "$IMAGE" 
        --cache=true --cache-ttl=48h --cache-repo="$REPOSITORY/kaniko-cache"
        --skip-unused-stages
        --digest-file kaniko.digest $BUILD_ARGS
    - digest="$(cat kaniko.digest)"
    - echo "${component_cap}_VERSION=$VERSION" >> ci.env
    - echo "${component_cap}_DIGEST=$digest" >> ci.env
    - echo "${component_cap}_IMAGE_SEMVER=$IMAGE" >> ci.env
    - echo "${component_cap}_IMAGE=$REPOSITORY/$COMPONENT@$digest" >> ci.env
    - cat ci.env
  artifacts:
    expire_in: 7 days
    reports:
      dotenv: ci.env
